name: solanaspin

services:
  webapi:
    container_name: webapi
    image: ${WEBAPI_IMAGE}
    pull_policy: always
    networks:
      - internal
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: https://+:7000;http://+:5000
      ASPNETCORE_HTTPS_PORT: 7000
      ASPNETCORE_Kestrel__Certificates__Default__Password: password!
      ASPNETCORE_Kestrel__Certificates__Default__Path: /webapi/cert.pfx
      DatabaseOptions__ConnectionString: Server=postgres;Port=5433;Database=game;User Id=pgadmin;Password=pgadmin
      DatabaseOptions__Provider: postgresql
      JwtOptions__Key: QsJbczCNysv/5SGh+U7sxedX8C07TPQPBdsnSDKZ/aE=
      HangfireOptions__Username: admin
      HangfireOptions__Password: Secure1234!Me
      MailOptions__From: no-reply@solanaspin.io
      MailOptions__Host: sandbox.smtp.mailtrap.io
      MailOptions__Port: 587
      MailOptions__UserName: 2f0f0293a76463
      MailOptions__Password: d6687bedfb7b61
      MailOptions__DisplayName: SolanaSpin
      CorsOptions__AllowedOrigins__0: http://localhost:5100
      CorsOptions__AllowedOrigins__1: http://localhost:7100
      OpenTelemetryOptions__Endpoint: http://otel-collector:4317
      RateLimitOptions__EnableRateLimiting: "false"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: SolanaSpin.WebApi.Host
      OriginOptions__OriginUrl: ${GAME_URL}
    volumes:
      - $BASE_PATH/webapi:/webapi:ro
    ports:
      - 7000:7000
      - 5000:5000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  webapi_dev:
    container_name: webapi_dev
    image: ${WEBAPI_DEV_IMAGE}
    pull_policy: always
    networks:
      - internal
    environment:
      ASPNETCORE_ENVIRONMENT: Staging
      ASPNETCORE_URLS: https://+:7000;http://+:5000
      ASPNETCORE_HTTPS_PORT: 7000
      ASPNETCORE_Kestrel__Certificates__Default__Password: password!
      ASPNETCORE_Kestrel__Certificates__Default__Path: /webapi/cert.pfx
      DatabaseOptions__ConnectionString: Server=postgres;Port=5433;Database=game_dev;User Id=pgadmin;Password=pgadmin
      DatabaseOptions__Provider: postgresql
      JwtOptions__Key: QsJbczCNysv/5SGh+U7sxedX8C07TPQPBdsnSDKZ/aE=
      HangfireOptions__Username: admin
      HangfireOptions__Password: Secure1234!Me
      MailOptions__From: no-reply@solanaspin.io
      MailOptions__Host: sandbox.smtp.mailtrap.io
      MailOptions__Port: 587
      MailOptions__UserName: 2f0f0293a76463
      MailOptions__Password: d6687bedfb7b61
      MailOptions__DisplayName: SolanaSpin
      CorsOptions__AllowedOrigins__0: http://localhost:5100
      CorsOptions__AllowedOrigins__1: http://localhost:7100
      OpenTelemetryOptions__Endpoint: http://otel-collector:4317
      RateLimitOptions__EnableRateLimiting: "false"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: SolanaSpinDev.WebApi.Host
      OriginOptions__OriginUrl: ${GAME_DEV_URL}
    volumes:
      - $BASE_PATH/webapi:/webapi:ro
    ports:
      - 7000:7000
      - 5000:5000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  blazor:
    container_name: blazor
    image: ${BLAZOR_IMAGE}
    pull_policy: always
    environment:
      Frontend_FSHStarterBlazorClient_Settings__AppSettingsTemplate: /usr/share/nginx/html/appsettings.json.TEMPLATE
      Frontend_FSHStarterBlazorClient_Settings__AppSettingsJson: /usr/share/nginx/html/appsettings.json
      FSHStarterBlazorClient_ApiBaseUrl: ${GAME_URL}
      ApiBaseUrl: ${GAME_URL}
    networks:
      - internal
    entrypoint: [
        "/bin/sh",
        "-c",
        "envsubst <
        $${Frontend_FSHStarterBlazorClient_Settings__AppSettingsTemplate} >
        $${Frontend_FSHStarterBlazorClient_Settings__AppSettingsJson} && find
        /usr/share/nginx/html -type f | xargs chmod +r && exec nginx -g
        'daemon off;'",
      ]
    ports:
      - 5100:5100
    depends_on:
      - webapi
    restart: unless-stopped

  blazor_dev:
    container_name: blazor_dev
    image: ${BLAZOR_DEV_IMAGE}
    pull_policy: always
    environment:
      Frontend_FSHStarterBlazorClient_Settings__AppSettingsTemplate: /usr/share/nginx/html/appsettings.json.TEMPLATE
      Frontend_FSHStarterBlazorClient_Settings__AppSettingsJson: /usr/share/nginx/html/appsettings.json
      FSHStarterBlazorClient_ApiBaseUrl: ${GAME_DEV_URL}
      ApiBaseUrl: ${GAME_DEV_URL}
    networks:
      - internal
    entrypoint: [
        "/bin/sh",
        "-c",
        "envsubst <
        $${Frontend_FSHStarterBlazorClient_Settings__AppSettingsTemplate} >
        $${Frontend_FSHStarterBlazorClient_Settings__AppSettingsJson} && find
        /usr/share/nginx/html -type f | xargs chmod +r && exec nginx -g
        'daemon off;'",
      ]
    ports:
      - 5100:5100
    depends_on:
      - webapi_dev
    restart: unless-stopped

  nextjs:
    container_name: nextjs
    image: ${NEXTJS_IMAGE}
    pull_policy: always
    environment:
      API_BASE_URL: ${GAME_URL}
      PORT: "5200"
    networks:
      - internal
    ports:
      - 5200:5200
    depends_on:
      - webapi
    restart: unless-stopped

  nextjs_dev:
    container_name: nextjs_dev
    image: ${NEXTJS_DEV_IMAGE}
    pull_policy: always
    environment:
      API_BASE_URL: ${GAME_DEV_URL}
      PORT: "5200"
    networks:
      - internal
    ports:
      - 5200:5200
    depends_on:
      - webapi_dev
    restart: unless-stopped

  nginx:
    container_name: nginx
    image: nginx:alpine
    networks:
      - internal
      - external
    ports:
      - 80:80
      - 443:443
    volumes:
      - $BASE_PATH/nginx/conf.d:/etc/nginx/conf.d:ro
      - $BASE_PATH/nginx/ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - webapi
      - blazor
    restart: unless-stopped

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    networks:
      - internal
    environment:
      POSTGRES_USER: pgadmin
      POSTGRES_PASSWORD: pgadmin
      PGPORT: 5433
    ports:
      - 5433:5433
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pgadmin"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - $BASE_PATH/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - 9090:9090

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: "472"
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - $BASE_PATH/grafana/config/:/etc/grafana/
      - $BASE_PATH/grafana/dashboards/:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - internal

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    command: --config /etc/otel/config.yaml
    environment:
      JAEGER_ENDPOINT: "jaeger:4317"
      LOKI_ENDPOINT: "http://loki:3100/loki/api/v1/push"
    volumes:
      - $BASE_PATH/otel-collector/otel-config.yaml:/etc/otel/config.yaml
      - $BASE_PATH/otel-collector/log:/log/otel
    depends_on:
      - jaeger
      - loki
      - prometheus
    ports:
      - 8888:8888 # Prometheus metrics exposed by the collector
      - 8889:8889 # Prometheus metrics exporter (scrape endpoint)
      - 13133:13133 # health_check extension
      - "55679:55679" # ZPages extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP Http receiver (Protobuf)
    restart: unless-stopped
    networks:
      - internal

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - $BASE_PATH/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    depends_on:
      - prometheus
    ports:
      - "16686:16686"
    restart: unless-stopped
    networks:
      - internal

  loki:
    container_name: loki
    image: grafana/loki:3.1.0
    command: -config.file=/mnt/config/loki-config.yml
    volumes:
      - $BASE_PATH/loki/loki.yml:/mnt/config/loki-config.yml
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - internal

  node_exporter:
    container_name: node_exporter
    image: quay.io/prometheus/node-exporter:v1.5.0
    command: "--path.rootfs=/host"
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    restart: unless-stopped
    networks:
      - internal

volumes:
  postgres_data:
    name: postgres_data
  grafana_data:
    name: grafana_data
  prometheus_data:
    name: prometheus_data
  mysql_data:
    name: mysql_data
  wordpress_data:
    name: wordpress_data

networks:
  internal:
    driver: bridge
    internal: true
  external:
    driver: bridge